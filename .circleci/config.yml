version: 2.1

parameters:
  ssh-fingerprint:
    type: string
    default:  ${GITHUB_SSH_FINGERPRINT}

aliases:
  # Workflow filters
  - &filter-only-master
    branches:
      only: master
  - &filter-only-release
    branches:
      only: /^v[1-9]*[0-9]+\.[1-9]*[0-9]+\.x$/

workflows:
  plugin_workflow:
    jobs:
      - yarn_install
      - build_docs:
          requires:
            - yarn_install
      - build_frontend:
          requires:
            - yarn_install
      - code_coverage_frontend:
          requires:
          - build_frontend
      - upload_coverage:
          requires:
          - code_coverage_frontend
      - package:
          requires:
            - build_frontend
            - build_docs
      - approve_release:
          type: approval
          requires:
            - package
            - upload_coverage
          filters: *filter-only-release
      - publish_github_release:
          requires:
            - approve_release
          filters: *filter-only-release

executors:
  default_exec: # declares a reusable executor
    docker:
      - image: srclosson/grafana-plugin-ci-alpine:latest
  e2e_exec:
    docker:
      - image: srclosson/grafana-plugin-ci-e2e:latest

jobs:
  yarn_install:
    executor: default_exec
    steps:
      - checkout
      - restore_cache:
          name: restore node_modules
          keys:
          - build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run:
          name: Install dependencies
          command: |
            mkdir ci
            [ -f ~/project/node_modules/.bin/grafana-toolkit ] || yarn install --frozen-lockfile
      - save_cache:
          name: save node_modules
          paths:
            - ~/project/node_modules
          key: build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - save_cache:
          name: save cypress cache
          paths:
            - ~/.cache/Cypress
          key: cypress-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}

  code_coverage_frontend:
    executor: default_exec
    steps:
    - checkout
    - attach_workspace:
        at: .
    - restore_cache:
        name: restore node_modules
        keys:
        - build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
    - run:
        name: Run coverage report
        command: |
          /usr/local/bin/cc-test-reporter format-coverage -t lcov -o out/codeclimate.frontend.json ci/jobs/build_frontend/coverage/lcov.info
    - run:
        name: Install jest and jest-junit
        command: yarn global add jest jest-junit
    - run:
        name: Run tests with JUnit as reporter
        command: jest --passWithNoTests --ci --runInBand --reporters=default --reporters=jest-junit
        environment:
          JEST_JUNIT_OUTPUT_DIR: "test-results/jest/results.xml"
    - persist_to_workspace:
        root: .
        paths:
          - out
          - ci/jobs/code_coverage_frontend
    - store_test_results:
        path: test-results

  # make sure CC_TEST_REPORTER_ID is set inside circleci project
  upload_coverage:
    executor: default_exec
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Upload coverage results to Code Climate
          command: |
            /usr/local/bin/cc-test-reporter sum-coverage out/codeclimate.*.json -d -p 1 -o out/codeclimate.total.json
            /usr/local/bin/cc-test-reporter upload-coverage -i out/codeclimate.total.json

  build_docs:
    executor: default_exec
    steps:
      - checkout
      - restore_cache:
          name: restore node_modules
          keys:
          - build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run:
          name: Build docs
          command: |
            ./node_modules/.bin/grafana-toolkit plugin:ci-docs
            [ -d "dist" ] || circleci-agent step halt
      - persist_to_workspace:
          root: .
          paths:
            - dist

  build_frontend:
    executor: default_exec
    steps:
      - checkout
      - restore_cache:
          name: restore node_modules
          keys:
          - build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run:
          name: Build and test frontend
          command: |
            ./node_modules/.bin/grafana-toolkit plugin:ci-build
            ./node_modules/.bin/grafana-toolkit plugin:ci-build --finish
      - persist_to_workspace:
          root: .
          paths:
            - ci

  package:
    executor: e2e_exec
    steps:
    - checkout
    - attach_workspace:
        at: .
    - restore_cache:
        name: restore node_modules
        keys:
        - build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
    - run:
        name: Package distribution
        command: |
          ./node_modules/.bin/grafana-toolkit plugin:ci-package
    - persist_to_workspace:
        root: .
        paths:
        - ci/jobs/package
        - ci/packages
        - ci/dist
        - ci/grafana-test-env
    - store_artifacts:
        path: ci/packages

  publish_github_release:
    working_directory: ~/briangann-datatable-panel
    docker:
    - image: cibuilds/github:0.13
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
          - << pipeline.parameters.ssh-fingerprint >>
      - attach_workspace:
          at: .
      - restore_cache:
          name: restore node_modules
          keys:
          - build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run:
          name: "Publish Release on GitHub"
          command: |
            # copy ci artifacts
            mkdir -p artifacts
            cp -r ci/packages/* artifacts
            #
            apk add --update --no-cache jq
            PLUGIN_NAME=`cat dist/plugin.json|jq '.id'| sed s/\"//g`
            RELEASE_NOTES=`awk 'BEGIN {FS="##"; RS=""} FNR==4 {print; exit}' CHANGELOG.md`
            VERSION=`cat dist/plugin.json|jq '.info.version'| sed s/\"//g`
            git config user.email "bkgann@gmail.com"
            git config user.name "CircleCI Automation"
            git checkout -b release-${VERSION}
            #git add artifacts/
            git add --force dist/
            git commit -m "automated release $VERSION [skip ci]"
            git push -f origin release-${VERSION}
            git tag -f v${VERSION}
            git push -f origin v${VERSION}
            ghr \
              -t ${GITHUB_ACCESS_TOKEN} \
              -u ${CIRCLE_PROJECT_USERNAME} \
              -r ${CIRCLE_PROJECT_REPONAME} \
              -c ${CIRCLE_SHA1} \
              -n "${PLUGIN_NAME} v${VERSION}" \
              -b "${RELEASE_NOTES}" \
              -delete \
              -replace \
              v${VERSION} \
              ./artifacts/
