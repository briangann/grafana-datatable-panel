version: 2

aliases:
  # Workflow filters
  - &filter-only-master
    branches:
      only: master

defaults: &defaults
  working_directory: ~/briangann-datatable-panel
  docker:
    - image: circleci/node:12.14-buster

jobs:
  build_plugin:
    <<: *defaults
    steps:
    - checkout
    - restore_cache:
        keys:
          - yarn-packages-{{ checksum "yarn.lock" }}
    - run:
        name:  Download cc-test-reporter
        command: |
          mkdir -p tmp/
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
          chmod +x ./tmp/cc-test-reporter
    - run:
        name: Install Node packages
        command: |
          yarn install --pure-lockfile
    - run:
        name: Run Toolkit Build
        command: |
          npx grafana-toolkit plugin:ci-build
    - run:
        name: Run coverage report
        command: |
          ./tmp/cc-test-reporter format-coverage -t lcov -o tmp/codeclimate.frontend.json ci/jobs/build_plugin/coverage/lcov.info
    - run:
        name: Install jest and jest-junit
        command: sudo yarn global add jest jest-junit
    - run:
        name: Run tests with JUnit as reporter
        command: jest --ci --runInBand --reporters=default --reporters=jest-junit
        environment:
          JEST_JUNIT_OUTPUT_DIR: "test-results/jest/results.xml"
    - save_cache:
        paths:
        - node_modules
        key: yarn-packages-{{ checksum "yarn.lock" }}
    - persist_to_workspace:
        root: .
        paths:
        - ci
        - tmp
    - store_test_results:
        path: test-results

  upload_coverage:
    docker:
    - image:  circleci/circleci-cli:alpine
    #  environment:
    #    CC_TEST_REPORTER_ID: add_this_to_circleci_config
    working_directory: ~/plugin
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Upload coverage results to Code Climate
          command: |
            ./tmp/cc-test-reporter sum-coverage tmp/codeclimate.frontend.json -d -p 1 -o tmp/codeclimate.total.json
            ./tmp/cc-test-reporter upload-coverage -i tmp/codeclimate.total.json

  build_docs:
    <<: *defaults
    steps:
    - checkout
    - restore_cache:
        keys:
        - yarn-packages-{{ checksum "yarn.lock" }}
    - run:
        name: Initialize CI
        command: mkdir -p ci # Avoid error if not exists
    - run:
        name: Build Docs
        command: npx grafana-toolkit plugin:ci-docs
    - save_cache:
        paths:
        - node_modules
        key: yarn-packages-{{ checksum "yarn.lock" }}
    - persist_to_workspace:
        root: .
        paths:
        - ci

  report:
    <<: *defaults
    steps:
    - checkout
    - attach_workspace:
        at: .
    - restore_cache:
        keys:
        - yarn-packages-{{ checksum "yarn.lock" }}
    - run:
        name: Toolkit Report
        command: npx grafana-toolkit plugin:ci-report
    - store_artifacts:
        path: ci

  package:
    <<: *defaults
    steps:
    - checkout
    - attach_workspace:
        at: .
    - restore_cache:
        keys:
        - yarn-packages-{{ checksum "yarn.lock" }}
    - run:
        name: Package Distribution
        command: npx grafana-toolkit plugin:ci-package
    - persist_to_workspace:
        root: .
        paths:
        - ci
    - store_artifacts:
        path: ci/packages


  publish_github_release:
    working_directory: ~/briangann-datatable-panel
    docker:
      - image: cibuilds/github:0.13
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "bc:00:3d:88:84:a2:e0:9c:0f:52:75:8c:3f:68:44:f3"
      - attach_workspace:
          at: .
      - run:
          name: "Publish Release on GitHub"
          command: |
            # copy ci dist
            cp -r ci/jobs/build_plugin/dist .
            # copy ci artifacts
            mkdir -p artifacts
            cp -r ci/packages/* artifacts
            apk add --update --no-cache jq
            RELEASE_NOTES=`awk 'BEGIN {FS="##"; RS=""} FNR==3 {print; exit}' CHANGELOG.md`
            PLUGIN_NAME=`cat dist/plugin.json|jq '.id'| sed s/\"//g`
            VERSION=`cat dist/plugin.json|jq '.info.version'| sed s/\"//g`
            git config user.email "bkgann@gmail.com"
            git config user.name "CircleCI Automation"
            git checkout -b release-${VERSION}
            git add --force dist/
            git add artifacts/
            git commit -m "automated release $VERSION [skip ci]"
            git push -f origin release-${VERSION}
            git tag -f v${VERSION}
            git push -f origin v${VERSION}
            ghr \
              -t ${GITHUB_TOKEN} \
              -u ${CIRCLE_PROJECT_USERNAME} \
              -r ${CIRCLE_PROJECT_REPONAME} \
              -c ${CIRCLE_SHA1} \
              -n "${PLUGIN_NAME} v${VERSION}" \
              -b "${RELEASE_NOTES}" \
              -delete \
              v${VERSION} \
              ./artifacts/


workflows:
  version: 2
  plugin_workflow:
    jobs:
    - build_plugin
    - build_docs:
        requires:
        - build_plugin
    - upload_coverage:
        requires:
        - build_plugin
    - package:
        requires:
        - build_docs
        - upload_coverage
    - report:
        requires:
        - package
    - approve_release:
        type: approval
        requires:
          - report
        filters: *filter-only-master
    - publish_github_release:
        requires:
          - approve_release
        filters: *filter-only-master
