{"version":3,"sources":["../src/transformers.js"],"names":["transformDataToTable","data","panel","model","TableModel","length","transformer","transformers","transform","message","_","moment","flatten","TimeSeries","timeseries_to_rows","description","getColumns","columns","text","type","i","series","y","datapoints","dp","rows","push","target","timeseries_to_columns","points","timeKey","toString","time","point","values","value","timeseries_aggregations","alias","getFlotPairs","cells","stats","annotations","evt","min","title","tags","table","undefined","json","names","maxDocs","Math","doc","flattened","propName","map","key","z","isObject","JSON","stringify"],"mappings":"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","file":"transformers.js","sourcesContent":["\r\nimport _ from 'lodash';\r\nimport moment from 'moment';\r\nimport flatten from 'app/core/utils/flatten';\r\nimport TimeSeries from 'app/core/time_series2';\r\nimport TableModel from 'app/core/table_model';\r\n\r\nvar transformers = {};\r\n\r\ntransformers.timeseries_to_rows = {\r\n  description: 'Time series to rows',\r\n  getColumns: function() {\r\n    return [];\r\n  },\r\n  transform: function(data, panel, model) {\r\n    model.columns = [\r\n      {text: 'Time', type: 'date'},\r\n      {text: 'Metric'},\r\n      {text: 'Value'},\r\n    ];\r\n\r\n    for (var i = 0; i < data.length; i++) {\r\n      var series = data[i];\r\n      for (var y = 0; y < series.datapoints.length; y++) {\r\n        var dp = series.datapoints[y];\r\n        model.rows.push([dp[1], series.target, dp[0]]);\r\n      }\r\n    }\r\n  },\r\n};\r\n\r\ntransformers.timeseries_to_columns = {\r\n  description: 'Time series to columns',\r\n  getColumns: function() {\r\n    return [];\r\n  },\r\n  transform: function(data, panel, model) {\r\n    model.columns.push({text: 'Time', type: 'date'});\r\n\r\n    // group by time\r\n    var points = {};\r\n\r\n    for (var i = 0; i < data.length; i++) {\r\n      var series = data[i];\r\n      model.columns.push({text: series.target});\r\n\r\n      for (var y = 0; y < series.datapoints.length; y++) {\r\n        var dp = series.datapoints[y];\r\n        var timeKey = dp[1].toString();\r\n\r\n        if (!points[timeKey]) {\r\n          points[timeKey] = {time: dp[1]};\r\n          points[timeKey][i] = dp[0];\r\n        } else {\r\n          points[timeKey][i] = dp[0];\r\n        }\r\n      }\r\n    }\r\n\r\n    for (var time in points) {\r\n      var point = points[time];\r\n      var values = [point.time];\r\n\r\n      for (let i = 0; i < data.length; i++) {\r\n        var value = point[i];\r\n        values.push(value);\r\n      }\r\n\r\n      model.rows.push(values);\r\n    }\r\n  }\r\n};\r\n\r\ntransformers.timeseries_aggregations = {\r\n  description: 'Time series aggregations',\r\n  getColumns: function() {\r\n    return [\r\n      {text: 'Avg', value: 'avg'},\r\n      {text: 'Min', value: 'min'},\r\n      {text: 'Max', value: 'max'},\r\n      {text: 'Total', value: 'total'},\r\n      {text: 'Current', value: 'current'},\r\n      {text: 'Count', value: 'count'},\r\n    ];\r\n  },\r\n  transform: function(data, panel, model) {\r\n    var i, y;\r\n    model.columns.push({text: 'Metric'});\r\n\r\n    if (panel.columns.length === 0) {\r\n      panel.columns.push({text: 'Avg', value: 'avg'});\r\n    }\r\n\r\n    for (i = 0; i < panel.columns.length; i++) {\r\n      model.columns.push({text: panel.columns[i].text});\r\n    }\r\n\r\n    for (i = 0; i < data.length; i++) {\r\n      var series = new TimeSeries({\r\n        datapoints: data[i].datapoints,\r\n        alias: data[i].target,\r\n      });\r\n\r\n      series.getFlotPairs('connected');\r\n      var cells = [series.alias];\r\n\r\n      for (y = 0; y < panel.columns.length; y++) {\r\n        cells.push(series.stats[panel.columns[y].value]);\r\n      }\r\n\r\n      model.rows.push(cells);\r\n    }\r\n  }\r\n};\r\n\r\ntransformers.annotations = {\r\n  description: 'Annotations',\r\n  getColumns: function() {\r\n    return [];\r\n  },\r\n  transform: function(data, panel, model) {\r\n    model.columns.push({text: 'Time', type: 'date'});\r\n    model.columns.push({text: 'Title'});\r\n    model.columns.push({text: 'Text'});\r\n    model.columns.push({text: 'Tags'});\r\n\r\n    if (!data || data.length === 0) {\r\n      return;\r\n    }\r\n\r\n    for (var i = 0; i < data.length; i++) {\r\n      var evt = data[i];\r\n      model.rows.push([evt.min, evt.title, evt.text, evt.tags]);\r\n    }\r\n  }\r\n};\r\n\r\ntransformers.table = {\r\n  description: 'Table',\r\n  getColumns: function(data) {\r\n    if (!data || data.length === 0) {\r\n      return [];\r\n    }\r\n  },\r\n  transform: function(data, panel, model) {\r\n    if (!data || data.length === 0) {\r\n      return;\r\n    }\r\n\r\n    if (data[0] === undefined) {\r\n      throw {message: 'Query result is not in table format, try using another transform.'};\r\n    }\r\n    if (data[0].type === undefined) {\r\n      throw {message: 'Query result is not in table format, try using another transform.'};\r\n    }\r\n    if (data[0].type !== 'table') {\r\n      throw {message: 'Query result is not in table format, try using another transform.'};\r\n    }\r\n    model.columns = data[0].columns;\r\n    model.rows = data[0].rows;\r\n  }\r\n};\r\n\r\ntransformers.json = {\r\n  description: 'JSON Data',\r\n  getColumns: function(data) {\r\n    if (!data || data.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    var names = {};\r\n    for (var i = 0; i < data.length; i++) {\r\n      var series = data[i];\r\n      if (series.type !== 'docs') {\r\n        continue;\r\n      }\r\n\r\n      // only look at 100 docs\r\n      var maxDocs = Math.min(series.datapoints.length, 100);\r\n      for (var y = 0; y < maxDocs; y++) {\r\n        var doc = series.datapoints[y];\r\n        var flattened = flatten(doc, null);\r\n        for (var propName in flattened) {\r\n          names[propName] = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return _.map(names, function(value, key) {\r\n      return {text: key, value: key};\r\n    });\r\n  },\r\n  transform: function(data, panel, model) {\r\n    var i, y, z;\r\n    for (i = 0; i < panel.columns.length; i++) {\r\n      model.columns.push({text: panel.columns[i].text});\r\n    }\r\n\r\n    if (model.columns.length === 0) {\r\n      model.columns.push({text: 'JSON'});\r\n    }\r\n\r\n    for (i = 0; i < data.length; i++) {\r\n      var series = data[i];\r\n\r\n      for (y = 0; y < series.datapoints.length; y++) {\r\n        var dp = series.datapoints[y];\r\n        var values = [];\r\n\r\n        if (_.isObject(dp) && panel.columns.length > 0) {\r\n          var flattened = flatten(dp, null);\r\n          for (z = 0; z < panel.columns.length; z++) {\r\n            values.push(flattened[panel.columns[z].value]);\r\n          }\r\n        } else {\r\n          values.push(JSON.stringify(dp));\r\n        }\r\n\r\n        model.rows.push(values);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nfunction transformDataToTable(data, panel) {\r\n  var model = new TableModel();\r\n\r\n  if (!data || data.length === 0) {\r\n    return model;\r\n  }\r\n\r\n  var transformer = transformers[panel.transform];\r\n  if (!transformer) {\r\n    throw {message: 'Transformer ' + panel.transformer + ' not found'};\r\n  }\r\n\r\n  transformer.transform(data, panel, model);\r\n  return model;\r\n}\r\n\r\nexport {transformers, transformDataToTable};\r\n"]}