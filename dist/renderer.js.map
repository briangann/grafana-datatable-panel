{"version":3,"sources":["../src/renderer.js"],"names":["$","kbn","moment","DataTable","DatatableRenderer","panel","table","isUtc","sanitize","formatters","colorState","value","style","thresholds","i","length","colors","_","first","v","column","undefined","isArray","join","String","cellTemplate","url","cellTemplateVariables","splitPattern","regex","stringToJsRegex","values","split","replace","map","val","link","text","escape","defaultCellFormatter","type","date","utc","format","dateFormat","valueFormatter","valueFormats","unit","isString","colorMode","getColorForValue","decimals","mappingType","valueMaps","Number","rangeMaps","from","to","colIndex","rowIndex","styles","columns","pattern","match","createColumnFormatter","exec","rows","rowData","formattedRowData","y","row","cellData","formatColumnValue","hidden","push","rowNumbersEnabled","unshift","columnNumber","colStyle","items","bgColor","bgColorIndex","color","colorIndex","isNaN","parseFloat","getStyleForColumn","cell","rowcolumn","getColorIndexForValue","columnName","columnAlias","columnAliases","name","alias","columnWidth","columnWidthHints","width","tableHolderId","id","fn","dataTable","isDataTable","aDT","destroy","empty","err","console","log","message","emptyData","columnDefs","_this","rowNumberOffset","title","getColumnAlias","columnWidthHint","getColumnWidthHint","td","col","css","fontSize","actualColumn","rowColor","rowColorIndex","rowColorData","getCellColors","parentNode","children","aChild","colorData","should_destroy","destroyedDT","formattedData","generateFormattedData","panelHeight","orderSetting","sortByColumnsData","tableOptions","searching","searchEnabled","info","infoEnabled","lengthChange","lengthChangeEnabled","scrollCollapse","scrollX","stateSave","dom","buttons","select","data","order","scroll","paging","scrollY","pagingType","datatablePagingType","$datatable","newDT","visible","compactRowsEnabled","addClass","stripedRowsEnabled","hoverEnabled","orderColumnEnabled","showCellBorders","showRowBorders","rowsPerPage","page","len","draw","on","search","nodes","each","innerHTML","new_row"],"mappings":"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","file":"renderer.js","sourcesContent":["import $ from 'jquery';\r\nimport kbn from 'app/core/utils/kbn';\r\nimport moment from 'moment';\r\nimport DataTable from './libs/datatables.net/js/jquery.dataTables.min.js';\r\n\r\nexport class DatatableRenderer {\r\n  constructor(panel, table, isUtc, sanitize) {\r\n    this.formatters = [];\r\n    this.colorState = {};\r\n    this.panel = panel;\r\n    this.table = table;\r\n    this.isUtc = isUtc;\r\n    this.sanitize = sanitize;\r\n  }\r\n\r\n  /**\r\n   * Given a value, return the color corresponding to the threshold set\r\n   * @param  {[Float]} value [Value to be evaluated]\r\n   * @param  {[Array]} style [Settings containing colors and thresholds]\r\n   * @return {[String]}       [color]\r\n   */\r\n  getColorForValue(value, style) {\r\n    if (!style.thresholds) {\r\n      return null;\r\n    }\r\n    for (var i = style.thresholds.length; i > 0; i--) {\r\n      if (value >= style.thresholds[i - 1]) {\r\n        return style.colors[i];\r\n      }\r\n    }\r\n    return _.first(style.colors);\r\n  }\r\n\r\n  // to determine the overall row color, the index of the threshold is needed\r\n  getColorIndexForValue(value, style) {\r\n    if (!style.thresholds) {\r\n      return null;\r\n    }\r\n    for (var i = style.thresholds.length; i > 0; i--) {\r\n      if (value >= style.thresholds[i - 1]) {\r\n        return i;\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * [defaultCellFormatter description]\r\n   * @param  {[type]} v     [description]\r\n   * @param  {[type]} style [description]\r\n   * @return {[type]}       [description]\r\n   */\r\n  defaultCellFormatter(v, style, column) {\r\n    if (v === null || v === void 0 || v === undefined || column === null) {\r\n      return '';\r\n    }\r\n    if (_.isArray(v)) {\r\n      v = v.join(', ');\r\n    }\r\n    v = String(v);\r\n\r\n   if (typeof style === 'undefined') { style = {}; }\r\n    var cellTemplate          = style.url;\r\n    var cellTemplateVariables = {};\r\n\r\n    if (typeof style.splitPattern === 'undefined' || style.splitPattern === '') {\r\n      style.splitPattern = '/ /';\r\n    }\r\n\r\n    var regex  = kbn.stringToJsRegex(String(style.splitPattern));\r\n    var values = v.split(regex);\r\n    if (typeof cellTemplate !== 'undefined') {\r\n      // Replace $__cell with this cell's content.\r\n      cellTemplate = cellTemplate.replace(/\\$__cell\\b/, v);\r\n      values.map((val, i) => cellTemplate = cellTemplate.replace(`$__pattern_${i}`, val));\r\n    }\r\n\r\n    if (style && style.sanitize) {\r\n      return this.sanitize(v);\r\n    }\r\n    else if (style && style.link && cellTemplate && column.text === style.column) {\r\n      return '<a href=\"' + cellTemplate.replace(/\\{\\}|\\$__cell/g, v) + '\" target=\"_blank\">' + v + '</a>';\r\n    }\r\n    else if (style && style.link) {\r\n      return '<a href=\"' + v + '\" target=\"_blank\">' + v + '</a>';\r\n    }\r\n    else {\r\n      return _.escape(v);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * [createColumnFormatter description]\r\n   * @param  {[type]} style  [description]\r\n   * @param  {[type]} column [description]\r\n   * @return {[type]}        [description]\r\n   */\r\n  createColumnFormatter(style, column) {\r\n    if (!style) {\r\n      return this.defaultCellFormatter;\r\n    }\r\n    if (style.type === 'hidden') {\r\n      return v => {\r\n        return null;\r\n      };\r\n    }\r\n    if (style.type === 'date') {\r\n      return v => {\r\n        if (v === undefined || v === null) {\r\n          return '-';\r\n        }\r\n        if (_.isArray(v)) {\r\n          v = v[0];\r\n        }\r\n        var date = moment(v);\r\n        if (this.isUtc) {\r\n          date = date.utc();\r\n        }\r\n        return date.format(style.dateFormat);\r\n      };\r\n    }\r\n    if (style.type === 'number') {\r\n      let valueFormatter = kbn.valueFormats[column.unit || style.unit];\r\n      return v => {\r\n        if (v === null || v === void 0) {\r\n          return '-';\r\n        }\r\n        if (_.isString(v)) {\r\n          return this.defaultCellFormatter(v, style, column);\r\n        }\r\n        if (style.colorMode) {\r\n          this.colorState[style.colorMode] = this.getColorForValue(v, style);\r\n        }\r\n        return valueFormatter(v, style.decimals, null);\r\n      };\r\n    }\r\n    if (style.type === 'string') {\r\n      return v => {\r\n        if (_.isArray(v)) {\r\n          v = v.join(', ');\r\n        }\r\n\r\n        const mappingType = style.mappingType || 0;\r\n\r\n        if (mappingType === 1 && style.valueMaps) {\r\n          for (let i = 0; i < style.valueMaps.length; i++) {\r\n            const map = style.valueMaps[i];\r\n\r\n            if (v === null) {\r\n              if (map.value === 'null') {\r\n                return map.text;\r\n              }\r\n              continue;\r\n            }\r\n\r\n            // Allow both numeric and string values to be mapped\r\n            if ((!_.isString(v) && Number(map.value) === Number(v)) || map.value === v) {\r\n              return this.defaultCellFormatter(map.text, style, column);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (mappingType === 2 && style.rangeMaps) {\r\n          for (let i = 0; i < style.rangeMaps.length; i++) {\r\n            const map = style.rangeMaps[i];\r\n\r\n            if (v === null) {\r\n              if (map.from === 'null' && map.to === 'null') {\r\n                return map.text;\r\n              }\r\n              continue;\r\n            }\r\n\r\n            if (Number(map.from) <= Number(v) && Number(map.to) >= Number(v)) {\r\n              return this.defaultCellFormatter(map.text, style, column);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (v === null || v === void 0) {\r\n          return '-';\r\n        }\r\n\r\n        return this.defaultCellFormatter(v, style, column);\r\n      };\r\n    }\r\n\r\n    return (value) => {\r\n      return this.defaultCellFormatter(value, style, column);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * [formatColumnValue description]\r\n   * @param  {[type]} colIndex [description]\r\n   * @param  {[type]} rowIndex [description]\r\n   * @param  {[type]} value    [description]\r\n   * @return {[type]}          [description]\r\n   */\r\n  formatColumnValue(colIndex, rowIndex, value) {\r\n\r\n    if (!this.formatters[colIndex]) {\r\n      for (let i = 0; i < this.panel.styles.length; i++) {\r\n        let style = this.panel.styles[i];\r\n        let column = this.table.columns[colIndex];\r\n        var regex = kbn.stringToJsRegex(style.pattern);\r\n        if (column.text.match(regex)) {\r\n          this.formatters[colIndex] = this.createColumnFormatter(style, column);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!this.formatters[colIndex]) {\r\n      this.formatters[colIndex] = this.defaultCellFormatter;\r\n    }\r\n\r\n    let v = this.formatters[colIndex](value);\r\n\r\n    if (/\\$__cell_\\d+/.exec(v)) {\r\n      for (let i = this.table.columns.length-1; i >= 0; i--) {\r\n        v = v.replace(`$__cell_${i}`, this.table.rows[rowIndex][i]);\r\n      }\r\n    }\r\n\r\n    return v;\r\n  }\r\n\r\n  /**\r\n   * [generateFormattedData description]\r\n   * @param  {[type]} rowData [description]\r\n   * @return {[type]}         [description]\r\n   */\r\n  generateFormattedData(rowData) {\r\n    let formattedRowData = [];\r\n\r\n    for (let y = 0; y < rowData.length; y++) {\r\n      let row = this.table.rows[y];\r\n      let cellData = [];\r\n      for (let i = 0; i < this.table.columns.length; i++) {\r\n        let value = this.formatColumnValue(i, y, row[i]);\r\n        if ((value === undefined) || (value === null)) {\r\n          this.table.columns[i].hidden = true;\r\n        }\r\n        cellData.push(value);\r\n      }\r\n      if (this.panel.rowNumbersEnabled) {\r\n        cellData.unshift('rowCounter');\r\n      }\r\n      formattedRowData.push(cellData);\r\n    }\r\n    return formattedRowData;\r\n  }\r\n\r\n  getStyleForColumn(columnNumber) {\r\n    let colStyle = null;\r\n    for (let i = 0; i < this.panel.styles.length; i++) {\r\n      let style = this.panel.styles[i];\r\n      let column = this.table.columns[columnNumber];\r\n      if (column === undefined) break;\r\n      var regex = kbn.stringToJsRegex(style.pattern);\r\n      if (column.text.match(regex)) {\r\n        colStyle = style;\r\n        break;\r\n      }\r\n    }\r\n    return colStyle;\r\n  }\r\n\r\n  getCellColors(colorState, columnNumber, cellData) {\r\n    var items = cellData.split(/([^0-9.,]+)/);\r\n    // only color cell if the content is a number?\r\n    var bgColor = null;\r\n    var bgColorIndex = null;\r\n    var color = null;\r\n    var colorIndex = null;\r\n    let colStyle = null;\r\n    let value = null;\r\n    // check if the content has a numeric value after the split\r\n    if (!isNaN(items[0])) {\r\n      // run value through threshold function\r\n      value = parseFloat(items[0].replace(\",\", \".\"));\r\n      colStyle = this.getStyleForColumn(columnNumber);\r\n    }\r\n    if (colStyle !== null && colStyle.colorMode != null) {\r\n      // check color for either cell or row\r\n      if ((colorState.cell) || (colorState.row) || (colorState.rowcolumn)){\r\n        // bgColor = _this.colorState.cell;\r\n        bgColor = this.getColorForValue(value, colStyle);\r\n        bgColorIndex = this.getColorIndexForValue(value, colStyle);\r\n        color = 'white';\r\n      }\r\n      // just the value color is set\r\n      if (colorState.value) {\r\n        //color = _this.colorState.value;\r\n        color = this.getColorForValue(value, colStyle);\r\n        colorIndex = this.getColorIndexForValue(value, colStyle);\r\n      }\r\n    }\r\n    return {\r\n      bgColor: bgColor,\r\n      bgColorIndex: bgColorIndex,\r\n      color: color,\r\n      colorIndex: colorIndex\r\n    };\r\n  }\r\n\r\n  getColumnAlias(columnName) {\r\n    // default to the columnName\r\n    var columnAlias = columnName;\r\n    if (this.panel.columnAliases !== undefined) {\r\n      for (let i = 0; i < this.panel.columnAliases.length; i++) {\r\n        if (this.panel.columnAliases[i].name === columnName) {\r\n          columnAlias = this.panel.columnAliases[i].alias;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return columnAlias;\r\n  }\r\n\r\n  getColumnWidthHint(columnName) {\r\n    // default to the columnName\r\n    var columnWidth = '';\r\n    if (this.panel.columnWidthHints !== undefined) {\r\n      for (let i = 0; i < this.panel.columnWidthHints.length; i++) {\r\n        if (this.panel.columnWidthHints[i].name === columnName) {\r\n          columnWidth = this.panel.columnWidthHints[i].width;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return columnWidth;\r\n  }\r\n\r\n  /**\r\n   * Construct table using Datatables.net API\r\n   *  multiple types supported\r\n   * timeseries_to_rows (column 0 = timestamp)\r\n   * timeseries_to_columns\r\n   * timeseries_aggregations - column 0 is the metric name (series name, not a timestamp)\r\n   * annotations - specific headers for this\r\n   * table\r\n   * json (raw)\r\n   * columns[x].type === \"date\" then set columndefs to parse the date, otherwise leave it as default\r\n   * convert table.columns[N].text to columns formatted to datatables.net format\r\n   * @return {[Boolean]} True if loaded without errors\r\n   */\r\n  render() {\r\n    const tableHolderId = '#datatable-panel-table-' + this.panel.id;\r\n    try {\r\n      if ($.fn.dataTable.isDataTable(tableHolderId)) {\r\n        var aDT = $(tableHolderId).DataTable();\r\n        aDT.destroy();\r\n        $(tableHolderId).empty();\r\n      }\r\n    }\r\n    catch(err) {\r\n      console.log(\"Exception: \" + err.message);\r\n    }\r\n\r\n    if (this.panel.emptyData) {\r\n      return;\r\n    }\r\n    var columns = [];\r\n    var columnDefs = [];\r\n    var _this = this;\r\n    var rowNumberOffset = 0;\r\n    if (this.panel.rowNumbersEnabled) {\r\n      rowNumberOffset = 1;\r\n      columns.push({\r\n        title: '',\r\n        type: 'number'\r\n      });\r\n      columnDefs.push(\r\n        {\r\n            \"searchable\": false,\r\n            \"orderable\": false,\r\n            \"targets\": 0,\r\n            \"width\": \"1%\",\r\n        });\r\n    }\r\n    for (let i = 0; i < this.table.columns.length; i++) {\r\n      var columnAlias = this.getColumnAlias(this.table.columns[i].text);\r\n      var columnWidthHint = this.getColumnWidthHint(this.table.columns[i].text);\r\n      // NOTE: the width below is a \"hint\" and will be overridden as needed, this lets most tables show timestamps\r\n      // with full width\r\n      /* jshint loopfunc: true */\r\n      columns.push({\r\n        title: columnAlias,\r\n        type: this.table.columns[i].type,\r\n        width: columnWidthHint\r\n      });\r\n        columnDefs.push(\r\n          {\r\n            \"targets\": i + rowNumberOffset,\r\n            \"createdCell\": function (td, cellData, rowData, row, col) {\r\n              // hidden columns have null data\r\n              if (cellData === null) return;\r\n              // set the fontsize for the cell\r\n              $(td).css('font-size', _this.panel.fontSize);\r\n              // undefined types should have numerical data, any others are already formatted\r\n              let actualColumn = col;\r\n              if (_this.panel.rowNumbersEnabled) {\r\n                actualColumn -= 1;\r\n              }\r\n              // FIXME: I hidden this line due to all columns are with undefined type, so they are not colorized\r\n              // if (_this.table.columns[actualColumn].type === undefined) return;\r\n              // for coloring rows, get the \"worst\" threshold\r\n              var rowColor = null;\r\n              var color = null;\r\n              var rowColorIndex = null;\r\n              var rowColorData = null;\r\n              if (_this.colorState.row) {\r\n                // run all of the rowData through threshold check, get the \"highest\" index\r\n                // and use that for the entire row\r\n                if (rowData === null) return;\r\n                rowColorIndex = -1;\r\n                rowColorData = null;\r\n                rowColor = _this.colorState.row;\r\n                // this should be configurable...\r\n                color = 'white';\r\n                for (let columnNumber = 0; columnNumber < _this.table.columns.length; columnNumber++) {\r\n                  // only columns of type undefined are checked\r\n                  if (_this.table.columns[columnNumber].type === undefined) {\r\n                    rowColorData = _this.getCellColors(_this.colorState, columnNumber, rowData[columnNumber + rowNumberOffset]);\r\n                    if (rowColorData.bgColorIndex !== null) {\r\n                      if (rowColorData.bgColorIndex > rowColorIndex) {\r\n                        rowColorIndex = rowColorData.bgColorIndex;\r\n                        rowColor = rowColorData.bgColor;\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n                // style the entire row (the parent of the td is the tr)\r\n                // this will color the rowNumber and Timestamp also\r\n                $(td.parentNode).children().css('color', color);\r\n                $(td.parentNode).children().css('background-color', rowColor);\r\n              }\r\n\r\n              if (_this.colorState.rowcolumn) {\r\n                // run all of the rowData through threshold check, get the \"highest\" index\r\n                // and use that for the entire row\r\n                if (rowData === null) return;\r\n                rowColorIndex = -1;\r\n                rowColorData = null;\r\n                rowColor = _this.colorState.rowcolumn;\r\n                // this should be configurable...\r\n                color = 'white';\r\n                for (let columnNumber = 0; columnNumber < _this.table.columns.length; columnNumber++) {\r\n                  // only columns of type undefined are checked\r\n                  if (_this.table.columns[columnNumber].type === undefined) {\r\n                    rowColorData = _this.getCellColors(_this.colorState, columnNumber, rowData[columnNumber + rowNumberOffset]);\r\n                    if (rowColorData.bgColorIndex !== null) {\r\n                      if (rowColorData.bgColorIndex > rowColorIndex) {\r\n                        rowColorIndex = rowColorData.bgColorIndex;\r\n                        rowColor = rowColorData.bgColor;\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n                // style the rowNumber and Timestamp column\r\n                // the cell colors will be determined in the next phase\r\n                if (_this.table.columns[0].type !== undefined) {\r\n                  var children = $(td.parentNode).children();\r\n                  var aChild = children[0];\r\n                  $(aChild).css('color', color);\r\n                  $(aChild).css('background-color', rowColor);\r\n                  // the 0 column contains the row number, if they are enabled\r\n                  // then the above just filled in the color for the row number,\r\n                  // now take care of the timestamp\r\n                  if (_this.panel.rowNumbersEnabled) {\r\n                    aChild = children[1];\r\n                    $(aChild).css('color', color);\r\n                    $(aChild).css('background-color', rowColor);\r\n                  }\r\n                }\r\n              }\r\n\r\n              // Process cell coloring\r\n              // Two scenarios:\r\n              //    1) Cell coloring is enabled, the above row color is skipped\r\n              //    2) RowColumn is enabled, the above row color is process, but we also\r\n              //    set the cell colors individually\r\n              var colorData = _this.getCellColors(_this.colorState, actualColumn, cellData);\r\n              if ((_this.colorState.cell) || (_this.colorState.rowcolumn)){\r\n                if (colorData.color !== undefined) {\r\n                  $(td).css('color', colorData.color);\r\n                }\r\n                if (colorData.bgColor !== undefined) {\r\n                  $(td).css('background-color', colorData.bgColor);\r\n                }\r\n              } else if (_this.colorState.value) {\r\n                if (colorData.color !== undefined) {\r\n                  $(td).css('color', colorData.color);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        );\r\n    }\r\n\r\n    try {\r\n      var should_destroy = false;\r\n      if ( $.fn.dataTable.isDataTable( '#datatable-panel-table-' + this.panel.id )) {\r\n        should_destroy = true;\r\n      }\r\n      if (should_destroy) {\r\n        var destroyedDT = $('#datatable-panel-table-' + this.panel.id).DataTable();\r\n        destroyedDT.destroy();\r\n        $('#datatable-panel-table-' + this.panel.id).empty();\r\n      }\r\n    }\r\n    catch(err) {\r\n      console.log(\"Exception: \" + err.message);\r\n    }\r\n    // sanity check\r\n    // annotations come back as 4 items in an array per row. If the first row content is undefined, then modify to empty\r\n    // since datatables.net throws errors\r\n    if (this.table.rows[0].length === 4) {\r\n      if (this.table.rows[0][0] === undefined) {\r\n        // detected empty annotations\r\n        this.table.rows = [];\r\n      }\r\n    }\r\n    // pass the formatted rows into the datatable\r\n    var formattedData = this.generateFormattedData(this.table.rows);\r\n\r\n    if (this.panel.rowNumbersEnabled) {\r\n      // shift the data to the right\r\n    }\r\n    var panelHeight = this.panel.panelHeight;\r\n    let orderSetting = this.panel.sortByColumnsData;\r\n    //if (this.panel.rowNumbersEnabled) {\r\n    //  // when row numbers are enabled, show them ascending\r\n    //  orderSetting = [[0, 'asc']];\r\n    //}\r\n\r\n    var tableOptions = {\r\n      \"lengthMenu\": [ [5, 10, 25, 50, 75, 100, -1], [5, 10, 25, 50, 75, 100, \"All\"] ],\r\n      searching: this.panel.searchEnabled,\r\n      info: this.panel.infoEnabled,\r\n      lengthChange: this.panel.lengthChangeEnabled,\r\n      scrollCollapse: false,\r\n      scrollX: true,\r\n      stateSave: true,\r\n      dom: 'Bfrtip',\r\n      buttons: [\r\n        'copy', 'excel', 'csv', 'pdf', 'print'\r\n      ],\r\n      select: {\r\n        style: 'os'\r\n      },\r\n      data: formattedData,\r\n      columns: columns,\r\n      columnDefs: columnDefs,\r\n      // TODO: move search options to editor\r\n      \"search\": {\r\n        \"regex\": true,\r\n        \"smart\": false\r\n      },\r\n      order: orderSetting,\r\n    };\r\n    if (this.panel.scroll) {\r\n      tableOptions.paging = false;\r\n      tableOptions.scrollY = panelHeight;\r\n    } else {\r\n      tableOptions.paging = true;\r\n      tableOptions.pagingType = this.panel.datatablePagingType;\r\n    }\r\n\r\n    var $datatable = $(tableHolderId);\r\n    var newDT = $datatable.DataTable(tableOptions);\r\n\r\n    // hide columns that are marked hidden\r\n    for (let i = 0; i < this.table.columns.length; i++) {\r\n      if (this.table.columns[i].hidden) {\r\n        newDT.column( i + rowNumberOffset ).visible( false );\r\n      }\r\n    }\r\n\r\n    // enable compact mode\r\n    if (this.panel.compactRowsEnabled) {\r\n      $datatable.addClass( 'compact' );\r\n    }\r\n    // enable striped mode\r\n    if (this.panel.stripedRowsEnabled) {\r\n      $datatable.addClass( 'stripe' );\r\n    }\r\n    if (this.panel.hoverEnabled) {\r\n      $datatable.addClass( 'hover' );\r\n    }\r\n    if (this.panel.orderColumnEnabled) {\r\n      $datatable.addClass( 'order-column' );\r\n    }\r\n    // these two are mutually exclusive\r\n    if (this.panel.showCellBorders) {\r\n      $datatable.addClass( 'cell-border' );\r\n    } else {\r\n      if (this.panel.showRowBorders) {\r\n        $datatable.addClass( 'row-border' );\r\n      }\r\n    }\r\n    if (!this.panel.scroll) {\r\n      // set the page size\r\n      if (this.panel.rowsPerPage !== null) {\r\n        newDT.page.len( this.panel.rowsPerPage ).draw();\r\n      }\r\n    }\r\n    // function to display row numbers\r\n    if (this.panel.rowNumbersEnabled) {\r\n      newDT.on( 'order.dt search.dt', function () {\r\n        newDT.column(0, {search:'applied', order:'applied'}).nodes().each( function (cell, i) {\r\n            cell.innerHTML = i+1;\r\n        } );\r\n      } ).draw();\r\n    }\r\n  }\r\n\r\n  render_values() {\r\n      let rows = [];\r\n\r\n      for (var y = 0; y < this.table.rows.length; y++) {\r\n        let row = this.table.rows[y];\r\n        let new_row = [];\r\n        for (var i = 0; i < this.table.columns.length; i++) {\r\n          new_row.push(this.formatColumnValue(i, y, row[i]));\r\n        }\r\n        rows.push(new_row);\r\n      }\r\n      return {\r\n          columns: this.table.columns,\r\n          rows: rows,\r\n      };\r\n  }\r\n}\r\n"]}