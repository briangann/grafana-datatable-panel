name: CI

on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main

permissions:
  contents: write
  id-token: write
  pull-requests: write

jobs:
  build:
    name: Build, lint and unit tests
    runs-on: ubuntu-latest
    outputs:
      plugin-id: ${{ steps.metadata.outputs.plugin-id }}
      plugin-version: ${{ steps.metadata.outputs.plugin-version }}
      has-e2e: ${{ steps.check-for-e2e.outputs.has-e2e }}
      has-backend: ${{ steps.check-for-backend.outputs.has-backend }}
    env:
      GRAFANA_ACCESS_POLICY_TOKEN: ${{ secrets.GRAFANA_ACCESS_POLICY_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      # pnpm action uses the packageManager field in package.json to
      # understand which version to install.
      - uses: pnpm/action-setup@v4
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Check types
        run: pnpm run typecheck
      - name: Lint
        run: pnpm run lint
      - name: Unit tests
        run: pnpm run test:ci
      - name: Build frontend
        run: pnpm run build

      - name: Check for backend
        id: check-for-backend
        run: |
          if [ -f "Magefile.go" ]
          then
            echo "has-backend=true" >> $GITHUB_OUTPUT
          fi

      - name: Setup Go environment
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true

      - name: Test backend
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: magefile/mage-action@v3
        with:
          version: latest
          args: coverage

      - name: Build backend
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: magefile/mage-action@v3
        with:
          version: latest
          args: buildAll

      - name: Check for E2E
        id: check-for-e2e
        run: |
          if [ -f "playwright.config.ts" ]
          then
            echo "has-e2e=true" >> $GITHUB_OUTPUT
          fi

      - name: Warn missing Grafana access policy token
        run: |
          echo Please generate a Grafana access policy token: https://grafana.com/developers/plugin-tools/publish-a-plugin/sign-a-plugin#generate-an-access-policy-token
          echo Once done please follow the instructions found here: https://github.com/${{github.repository}}/blob/main/README.md#using-github-actions-release-workflow
        if: ${{ env.GRAFANA_ACCESS_POLICY_TOKEN == '' }}

      - name: Sign plugin
        run: pnpm run sign
        if: ${{ env.GRAFANA_ACCESS_POLICY_TOKEN != '' }}

      - name: Get plugin metadata
        id: metadata
        run: |
          sudo apt-get install jq

          export GRAFANA_PLUGIN_ID=$(cat dist/plugin.json | jq -r .id)
          export GRAFANA_PLUGIN_VERSION=$(cat dist/plugin.json | jq -r .info.version)
          export GRAFANA_PLUGIN_ARTIFACT=${GRAFANA_PLUGIN_ID}-${GRAFANA_PLUGIN_VERSION}.zip

          echo "plugin-id=${GRAFANA_PLUGIN_ID}" >> $GITHUB_OUTPUT
          echo "plugin-version=${GRAFANA_PLUGIN_VERSION}" >> $GITHUB_OUTPUT
          echo "archive=${GRAFANA_PLUGIN_ARTIFACT}" >> $GITHUB_OUTPUT

      - name: Package plugin
        id: package-plugin
        run: |
          mv dist ${{ steps.metadata.outputs.plugin-id }}
          zip ${{ steps.metadata.outputs.archive }} ${{ steps.metadata.outputs.plugin-id }} -r

      - name: Check plugin.json
        run: |
          docker run --pull=always \
            -v $PWD/${{ steps.metadata.outputs.archive }}:/archive.zip \
            grafana/plugin-validator-cli -analyzer=metadatavalid /archive.zip

      - name: Archive Build
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.metadata.outputs.plugin-id }}-${{ steps.metadata.outputs.plugin-version }}
          path: ${{ steps.metadata.outputs.plugin-id }}
          retention-days: 5

      - name: Code Climate - Check environment
        id: check-for-codeclimate
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        run: |
          if [ ! -z $CC_TEST_REPORTER_ID ]
          then
            echo "has-codeclimate=true" >> $GITHUB_OUTPUT
          fi

      - name: Code Climate - Run
        if: steps.check-for-codeclimate.outputs.has-codeclimate == 'true'
        run: |
          mkdir -p ccbin/
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./ccbin/cc-test-reporter
          chmod +x ./ccbin/cc-test-reporter
          ./ccbin/cc-test-reporter format-coverage -t lcov -o out/codeclimate.frontend.json coverage/lcov.info
          npx jest --ci --runInBand --reporters=default --reporters=jest-junit

      - name: Code Climate - Upload
        if: steps.check-for-codeclimate.outputs.has-codeclimate == 'true'
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        run: |
          ./ccbin/cc-test-reporter sum-coverage out/codeclimate.*.json -d -p 1 -o out/codeclimate.total.json
          ./ccbin/cc-test-reporter upload-coverage -i out/codeclimate.total.json

  resolve-versions:
    name: Resolve e2e images
    runs-on: ubuntu-latest
    timeout-minutes: 3
    needs: build
    if: ${{ needs.build.outputs.has-e2e == 'true' }}
    outputs:
      matrix: ${{ steps.resolve-versions.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Resolve Grafana E2E versions
        id: resolve-versions
        uses: grafana/plugin-actions/e2e-version@main

  playwright-tests:
    needs: [resolve-versions, build]
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        GRAFANA_IMAGE: ${{fromJson(needs.resolve-versions.outputs.matrix)}}
    name: e2e test ${{ matrix.GRAFANA_IMAGE.name }}@${{ matrix.GRAFANA_IMAGE.VERSION }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download plugin
        uses: actions/download-artifact@v4
        with:
          path: dist
          name: ${{ needs.build.outputs.plugin-id }}-${{ needs.build.outputs.plugin-version }}

      - name: Execute permissions on binary
        if: needs.build.outputs.has-backend == 'true'
        run: |
          chmod +x ./dist/gpx_*

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dev dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Start Grafana
        run: |
          docker compose pull
          ANONYMOUS_AUTH_ENABLED=false DEVELOPMENT=false GRAFANA_VERSION=${{ matrix.GRAFANA_IMAGE.VERSION }} GRAFANA_IMAGE=${{ matrix.GRAFANA_IMAGE.NAME }} docker compose up -d

      - name: Wait for grafana server
        uses: grafana/plugin-actions/wait-for-grafana@main
        with:
          url: http://localhost:3000/login

      - name: Install Playwright Browsers
        run: pnpm run playwright install chromium --with-deps

      - name: Run Playwright tests
        id: run-tests
        run: pnpm run e2e

      - name: Upload e2e test summary
        uses: grafana/plugin-actions/playwright-gh-pages/upload-report-artifacts@main
        if: ${{ always() && !cancelled() }}
        with:
          upload-report: false
          github-token: ${{ secrets.GITHUB_TOKEN }}
          test-outcome: ${{ steps.run-tests.outcome }}

      - name: Docker logs
        if: ${{ always() && steps.run-tests.outcome == 'failure' }}
        run: |
          docker logs briangann-datatable-panel >& grafana-server.log

      - name: Stop grafana docker
        run: docker compose down

      # Uncomment this step to upload the server log to Github artifacts. Remember Github artifacts are public on the Internet if the repository is public.
      - name: Upload server log
        uses: actions/upload-artifact@v4
        if: ${{ always() && steps.run-tests.outcome == 'failure' }}
        with:
          name: ${{ matrix.GRAFANA_IMAGE.NAME }}-v${{ matrix.GRAFANA_IMAGE.VERSION }}-${{github.run_id}}-server-log
          path: grafana-server.log
          retention-days: 5

  publish-report:
    if: ${{ always() && !cancelled() }}
    needs: [playwright-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Publish report
        uses: grafana/plugin-actions/playwright-gh-pages/deploy-report-pages@main
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
